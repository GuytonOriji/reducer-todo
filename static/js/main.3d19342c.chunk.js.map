{"version":3,"sources":["logo.svg","reducers/TodoReducer.js","reducers/TodoScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","item","completed","id","Math","floor","random","todoReducer","state","action","console","log","type","payload","filter","flush","TodoScreen","props","className","list","map","task","Alert","key","onClick","e","target","remove","dispatch","App","useReducer","useState","todo","setTodo","name","onChange","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,4ICC9BC,EAAe,CAC5B,CACIC,KAAK,iBACRC,WAAU,EACVC,GAAGC,KAAKC,MAAoB,IAAdD,KAAKE,YASPC,EAAc,SAACC,EAAOC,GAEjC,OADAC,QAAQC,IAAIH,EAAOC,GACXA,EAAOG,MAEb,IAAK,WACH,MAAM,GAAN,mBAAYJ,GAAZ,CAAkB,CAEhBP,KAAKQ,EAAOI,QACZX,WAAU,EACVC,GAAGC,KAAKC,MAAoB,IAAdD,KAAKE,aAEpB,IAAK,iBACN,MAAM,GAAN,mBAAWE,GAAX,gBAAqBC,EAAOI,QAA5B,CAEQZ,KAAK,YACLC,WAAU,EACVC,GAAGC,KAAKC,MAAoB,IAAdD,KAAKE,cAIpB,IAAK,QACZ,OAAOE,EAAMM,QAAO,SAAAC,GACnB,OAAyB,IAAlBA,EAAMb,aAEhB,QACE,OAAOM,I,QCuBEQ,MAvDf,SAAqBC,GAAO,IAAD,OAiBd,OACT,yBAAKC,UAAU,OACd,yBAAKA,UAAU,UAEJD,EAAME,MAAQF,EAAME,KAAKC,KAAI,SAAAC,GAElB,OADHX,QAAQC,KAAKU,EAAKnB,WACPmB,EAAKnB,UAaR,kBAACoB,EAAA,EAAD,CAAOC,IAAKF,EAAKlB,GAAIe,UAAU,OAAQM,QAAS,SAACC,GACjDA,EAAEC,OAAOC,SAEjCV,EAAMW,SAAS,CACbhB,KAAK,iBAAiBC,QAAQ,gBAJR,cAXA,kBAACS,EAAA,EAAD,CAAOC,IAAKF,EAAKlB,GAAIe,UAAU,OAAQM,QAAS,SAACC,GACjDA,EAAEC,OAAOC,SACjCV,EAAMW,SAAS,CACbhB,KAAK,iBAAiBC,QAAQ,MAGlCQ,EAAKpB,Y,MC2BI4B,MAvDf,WAAgB,IAAD,EAGUC,qBAAWvB,EAAYP,GAHjC,mBAGRQ,EAHQ,KAGFoB,EAHE,OAKYG,mBAAS,IALrB,mBAKJC,EALI,KAKCC,EALD,KAkBF,OACT,yBAAKf,UAAU,aACf,kBAAC,EAAD,CACAC,KAAMX,EACNoB,SAAUA,IAET,yBAAKV,UAAU,QACf,2BAAON,KAAK,OAAOsB,KAAK,OAAOC,SAAU,SAACV,GACzCQ,EAAQR,EAAEC,OAAOU,QAElBlB,UAAU,iBAEV,4BAAQM,QAAS,WACdI,EAAS,CACPhB,KAAK,WAAYC,QAAQmB,KAI9Bd,UAAU,gBANV,QAUC,4BAAQM,QAAS,WACfI,EAAS,CACPhB,KAAK,WAIVM,UAAU,kBANT,YCtCcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.3d19342c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","  \nexport const initialState = [\n{\n    item:\"take out trash\",\n completed:false,\n id:Math.floor(Math.random()*1000),\n  \n  \n \n}];\n\n\n\n\nexport const todoReducer = (state, action) => {\n  console.log(state, action);\n  switch (action.type) {\n\n    case \"ADD_TODO\":\n      return [ ...state,{\n       \n        item:action.payload,\n        completed:false,\n        id:Math.floor(Math.random()*1000)\n      }]\n       case \"COMPLETED_TODO\":\n      return [...state,{...action.payload,\n              \n              item:'completed',\n              completed:true,\n              id:Math.floor(Math.random()*1000)\n      \n            }]\n\n             case \"CLEAR\":\n      return state.filter(flush=>{\n       return flush.completed===false\n      })\n    default:\n      return state;\n  }\n  // if (action.type === 'TOGGLE_EDITING') {\n  //   return {\n  //     ...state,\n  //     editing: !state.editing\n  //   };\n  // } else if (action.type === 'UPDATE_TITLE') {\n  //   return {\n  //     ...state,\n  //     title: action.payload,\n  //     editing: false\n  //   };\n  // } else {\n  //   return state;\n  // }\n};","import React, {useState,useReducer, useEffect } from 'react';\nimport { Alert } from 'reactstrap';\nimport { todoReducer, initialState } from './TodoReducer';\n\n\n\n\nfunction TodoScreen (props){\n            \n\n\n// const [state,dispatch] = useReducer(todoReducer,initialState)\n\n\n     // useEffect(()=>{\n     //      setTodoList(\n     //        todoList = ['get milk','code','render components']\n     //        )\n     // },[todoList])\n\n  \n\n\n\n             return (\n    <div className=\"App\">\n     <div className=\"screen\">\n        {           \n                props.list && props.list.map(task=>{\n                        console.log(!task.completed)\n                           return !task.completed?\n                            (\n                                <Alert key={task.id} className=\"info\"  onClick={(e)=>{\n                                e.target.remove()\n        props.dispatch({\n          type:'COMPLETED_TODO',payload:this\n        })\n     }}>\n     {task.item}\n     </Alert>\n                                )\n                            :\n                            (\n                                <Alert key={task.id} className=\"info\"  onClick={(e)=>{\n                                e.target.remove()\n                               \n        props.dispatch({\n          type:'COMPLETED_TODO',payload:\"completed\"\n        })\n     }}>\n                            COMPLETED!\n     </Alert>\n                                );\n                })\n\n               }\n     </div>\n    </div>\n  );\n        \n}\n\nexport default TodoScreen;\n","import React, {useState,useReducer, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { todoReducer, initialState } from './reducers/TodoReducer';\nimport TodoScreen from './reducers/TodoScreen'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nfunction App (){\n    \n\nconst [state,dispatch] = useReducer(todoReducer,initialState)\n\n    const [todo,setTodo] = useState('')\n\n\n     // useEffect(()=>{\n     //      setTodoList(\n     //        todoList = ['get milk','code','render components']\n     //        )\n     // },[todoList])\n\n  \n\n\n\n             return (\n    <div className=\"container\">\n    <TodoScreen \n    list={state}\n    dispatch={dispatch}\n    />\n     <div className=\"card\">\n     <input type='text' name=\"todo\" onChange={(e)=>{\n      setTodo(e.target.value)\n     }}\n     className='form-control'\n     />\n     <button onClick={()=>{\n        dispatch({\n          type:'ADD_TODO', payload:todo,\n        })\n     }}\n\n     className=\"btn btn-info\"\n\n     >post</button>\n\n      <button onClick={()=>{\n        dispatch({\n          type:'CLEAR'\n        })\n     }}\n\n     className=\"btn btn-danger\"\n\n     >Clear</button>\n     </div>\n    </div>\n  );\n        \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}